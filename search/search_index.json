{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"IddirNet API","text":"<p>Welcome to the official documentation for the IddirNet RESTful API. IddirNet is a platform for managing community associations (Iddirs), enabling CRUD operations for users, groups, members, and contributions.</p>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>API Base URL: <code>https://iddirnet-75e4b810c131.herokuapp.com/api/v1</code></li> <li>Authentication: Use JWT Bearer tokens (see Authentication section).</li> <li>Tools: Postman, curl, or any HTTP client.</li> </ul>"},{"location":"#example-workflow","title":"Example Workflow","text":"<ol> <li>Register/Login: Create an account or log in to get a token.</li> <li>Create an Iddir: Set up a new community group.</li> <li>Manage Members &amp; Contributions: Add users and track payments.</li> </ol> <p>For testing, import the Postman Collection or view the Swagger UI.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>User Management: Full CRUD for users with role-based access.</li> <li>Iddir Groups: Create and manage community associations.</li> <li>Membership &amp; Contributions: Track joins and financial contributions.</li> <li>Pagination &amp; Filtering: Efficient data retrieval.</li> </ul>"},{"location":"#navigation","title":"Navigation","text":"<ul> <li>API Reference \u2192: Detailed endpoints with cURL examples.</li> </ul> <p>Need Help?</p> <p>Check the Error Handling section or contact support@iddirnet.com.</p> <p> </p>"},{"location":"api/","title":"IddirNet API Documentation","text":""},{"location":"api/#overview","title":"Overview","text":"<p>This documentation covers the RESTful API for IddirNet, a platform for managing community associations (Iddirs). The API supports CRUD operations for key resources such as users, iddirs, members, and contributions.</p> <ul> <li>Base URL: <code>https://iddirnet-75e4b810c131.herokuapp.com/api/v1</code></li> <li>Authentication: Bearer token in <code>Authorization</code> header (obtain via <code>/auth/login</code>).</li> <li>Content-Type: <code>application/json</code> for all requests and responses.</li> <li>Error Handling: Standard HTTP status codes; error responses include <code>{\"error\": \"message\", \"details\": {...}}</code>.</li> </ul> <p>Use tools like Postman or curl for testing. Examples below use curl commands.</p>"},{"location":"api/#authentication","title":"Authentication","text":""},{"location":"api/#login-post-authlogin","title":"Login (POST /auth/login)","text":"<p>Authenticate a user and receive a JWT token.</p> <p>Description: Logs in a user with email and password.</p> <p>Request Body: <pre><code>{\n  \"email\": \"user@example.com\",\n  \"password\": \"securepassword\"\n}\n</code></pre></p> <p>cURL Example: <pre><code>curl -X POST https://iddirnet-75e4b810c131.herokuapp.com/api/v1/auth/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"email\": \"user@example.com\",\n    \"password\": \"securepassword\"\n  }'\n</code></pre></p> <p>Response (200 OK): <pre><code>{\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"user\": {\n    \"id\": 1,\n    \"email\": \"user@example.com\",\n    \"name\": \"John Doe\"\n  }\n}\n</code></pre></p>"},{"location":"api/#register-post-authregister","title":"Register (POST /auth/register)","text":"<p>Create a new user account.</p> <p>Description: Registers a new user.</p> <p>Request Body: <pre><code>{\n  \"email\": \"newuser@example.com\",\n  \"password\": \"securepassword\",\n  \"name\": \"Jane Doe\",\n  \"phone\": \"+1234567890\"\n}\n</code></pre></p> <p>cURL Example: <pre><code>curl -X POST https://iddirnet-75e4b810c131.herokuapp.com/api/v1/auth/register \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"email\": \"newuser@example.com\",\n    \"password\": \"securepassword\",\n    \"name\": \"Jane Doe\",\n    \"phone\": \"+1234567890\"\n  }'\n</code></pre></p> <p>Response (201 Created): <pre><code>{\n  \"id\": 2,\n  \"email\": \"newuser@example.com\",\n  \"name\": \"Jane Doe\",\n  \"phone\": \"+1234567890\"\n}\n</code></pre></p>"},{"location":"api/#users","title":"Users","text":"<p>CRUD operations for user management.</p>"},{"location":"api/#list-users-get-users","title":"List Users (GET /users)","text":"<p>Retrieve a list of all users.</p> <p>Description: Fetches users with pagination support.</p> <p>Query Parameters: - <code>page</code> (int, optional): Page number (default: 1). - <code>limit</code> (int, optional): Items per page (default: 10).</p> <p>cURL Example: <pre><code>curl -X GET \"https://iddirnet-75e4b810c131.herokuapp.com/api/v1/users?page=1&amp;limit=5\" \\\n  -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n</code></pre></p> <p>Response (200 OK): <pre><code>{\n  \"users\": [\n    {\n      \"id\": 1,\n      \"email\": \"user@example.com\",\n      \"name\": \"John Doe\",\n      \"phone\": \"+1234567890\"\n    }\n  ],\n  \"total\": 1,\n  \"page\": 1,\n  \"limit\": 5\n}\n</code></pre></p>"},{"location":"api/#get-user-get-usersid","title":"Get User (GET /users/{id})","text":"<p>Retrieve a specific user by ID.</p> <p>Description: Fetches details of a single user.</p> <p>Path Parameters: - <code>id</code> (int, required): User ID.</p> <p>cURL Example: <pre><code>curl -X GET https://iddirnet-75e4b810c131.herokuapp.com/api/v1/users/1 \\\n  -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n</code></pre></p> <p>Response (200 OK): <pre><code>{\n  \"id\": 1,\n  \"email\": \"user@example.com\",\n  \"name\": \"John Doe\",\n  \"phone\": \"+1234567890\"\n}\n</code></pre></p>"},{"location":"api/#create-user-post-users","title":"Create User (POST /users)","text":"<p>Create a new user (admin only).</p> <p>Description: Adds a new user to the system.</p> <p>Request Body: <pre><code>{\n  \"email\": \"admin@example.com\",\n  \"password\": \"securepassword\",\n  \"name\": \"Admin User\",\n  \"phone\": \"+0987654321\",\n  \"role\": \"admin\"\n}\n</code></pre></p> <p>cURL Example: <pre><code>curl -X POST https://iddirnet-75e4b810c131.herokuapp.com/api/v1/users \\\n  -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"email\": \"admin@example.com\",\n    \"password\": \"securepassword\",\n    \"name\": \"Admin User\",\n    \"phone\": \"+0987654321\",\n    \"role\": \"admin\"\n  }'\n</code></pre></p> <p>Response (201 Created): <pre><code>{\n  \"id\": 3,\n  \"email\": \"admin@example.com\",\n  \"name\": \"Admin User\",\n  \"phone\": \"+0987654321\",\n  \"role\": \"admin\"\n}\n</code></pre></p>"},{"location":"api/#update-user-put-usersid","title":"Update User (PUT /users/{id})","text":"<p>Update an existing user.</p> <p>Description: Updates user details.</p> <p>Path Parameters: - <code>id</code> (int, required): User ID.</p> <p>Request Body: <pre><code>{\n  \"name\": \"Updated John Doe\",\n  \"phone\": \"+1111111111\"\n}\n</code></pre></p> <p>cURL Example: <pre><code>curl -X PUT https://iddirnet-75e4b810c131.herokuapp.com/api/v1/users/1 \\\n  -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"Updated John Doe\",\n    \"phone\": \"+1111111111\"\n  }'\n</code></pre></p> <p>Response (200 OK): <pre><code>{\n  \"id\": 1,\n  \"email\": \"user@example.com\",\n  \"name\": \"Updated John Doe\",\n  \"phone\": \"+1111111111\"\n}\n</code></pre></p>"},{"location":"api/#delete-user-delete-usersid","title":"Delete User (DELETE /users/{id})","text":"<p>Delete a user.</p> <p>Description: Removes a user from the system.</p> <p>Path Parameters: - <code>id</code> (int, required): User ID.</p> <p>cURL Example: <pre><code>curl -X DELETE https://iddirnet-75e4b810c131.herokuapp.com/api/v1/users/1 \\\n  -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n</code></pre></p> <p>Response (204 No Content): Empty body.</p>"},{"location":"api/#iddirs","title":"Iddirs","text":"<p>CRUD for Iddir groups (community associations).</p>"},{"location":"api/#list-iddirs-get-iddirs","title":"List Iddirs (GET /iddirs)","text":"<p>Retrieve all Iddirs.</p> <p>Query Parameters: - <code>page</code> (int, optional): Page number. - <code>limit</code> (int, optional): Items per page.</p> <p>cURL Example: <pre><code>curl -X GET \"https://iddirnet-75e4b810c131.herokuapp.com/api/v1/iddirs?page=1&amp;limit=10\" \\\n  -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n</code></pre></p> <p>Response (200 OK): <pre><code>{\n  \"iddirs\": [\n    {\n      \"id\": 1,\n      \"name\": \"Local Iddir Group\",\n      \"description\": \"Community savings group\",\n      \"location\": \"Addis Ababa\"\n    }\n  ],\n  \"total\": 1\n}\n</code></pre></p>"},{"location":"api/#get-iddir-get-iddirsid","title":"Get Iddir (GET /iddirs/{id})","text":"<p>Get specific Iddir details.</p> <p>Path Parameters: - <code>id</code> (int, required): Iddir ID.</p> <p>cURL Example: <pre><code>curl -X GET https://iddirnet-75e4b810c131.herokuapp.com/api/v1/iddirs/1 \\\n  -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n</code></pre></p> <p>Response (200 OK): <pre><code>{\n  \"id\": 1,\n  \"name\": \"Local Iddir Group\",\n  \"description\": \"Community savings group\",\n  \"location\": \"Addis Ababa\"\n}\n</code></pre></p>"},{"location":"api/#create-iddir-post-iddirs","title":"Create Iddir (POST /iddirs)","text":"<p>Create a new Iddir.</p> <p>Request Body: <pre><code>{\n  \"name\": \"New Iddir\",\n  \"description\": \"New community group\",\n  \"location\": \"Bahir Dar\",\n  \"adminUserId\": 1\n}\n</code></pre></p> <p>cURL Example: <pre><code>curl -X POST https://iddirnet-75e4b810c131.herokuapp.com/api/v1/iddirs \\\n  -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"New Iddir\",\n    \"description\": \"New community group\",\n    \"location\": \"Bahir Dar\",\n    \"adminUserId\": 1\n  }'\n</code></pre></p> <p>Response (201 Created): <pre><code>{\n  \"id\": 2,\n  \"name\": \"New Iddir\",\n  \"description\": \"New community group\",\n  \"location\": \"Bahir Dar\"\n}\n</code></pre></p>"},{"location":"api/#update-iddir-put-iddirsid","title":"Update Iddir (PUT /iddirs/{id})","text":"<p>Update Iddir details.</p> <p>Path Parameters: - <code>id</code> (int, required): Iddir ID.</p> <p>Request Body: <pre><code>{\n  \"name\": \"Updated Iddir\",\n  \"description\": \"Updated description\"\n}\n</code></pre></p> <p>cURL Example: <pre><code>curl -X PUT https://iddirnet-75e4b810c131.herokuapp.com/api/v1/iddirs/1 \\\n  -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"Updated Iddir\",\n    \"description\": \"Updated description\"\n  }'\n</code></pre></p> <p>Response (200 OK): <pre><code>{\n  \"id\": 1,\n  \"name\": \"Updated Iddir\",\n  \"description\": \"Updated description\",\n  \"location\": \"Addis Ababa\"\n}\n</code></pre></p>"},{"location":"api/#delete-iddir-delete-iddirsid","title":"Delete Iddir (DELETE /iddirs/{id})","text":"<p>Delete an Iddir.</p> <p>Path Parameters: - <code>id</code> (int, required): Iddir ID.</p> <p>cURL Example: <pre><code>curl -X DELETE https://iddirnet-75e4b810c131.herokuapp.com/api/v1/iddirs/1 \\\n  -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n</code></pre></p> <p>Response (204 No Content): Empty body.</p>"},{"location":"api/#members","title":"Members","text":"<p>CRUD for managing members in Iddirs.</p>"},{"location":"api/#list-members-get-iddirsiddiridmembers","title":"List Members (GET /iddirs/{iddirId}/members)","text":"<p>List members of an Iddir.</p> <p>Path Parameters: - <code>iddirId</code> (int, required): Iddir ID.</p> <p>cURL Example: <pre><code>curl -X GET https://iddirnet-75e4b810c131.herokuapp.com/api/v1/iddirs/1/members \\\n  -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n</code></pre></p> <p>Response (200 OK): <pre><code>{\n  \"members\": [\n    {\n      \"id\": 1,\n      \"userId\": 1,\n      \"iddirId\": 1,\n      \"joinDate\": \"2025-01-01T00:00:00Z\",\n      \"status\": \"active\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"api/#add-member-post-iddirsiddiridmembers","title":"Add Member (POST /iddirs/{iddirId}/members)","text":"<p>Add a member to an Iddir.</p> <p>Path Parameters: - <code>iddirId</code> (int, required): Iddir ID.</p> <p>Request Body: <pre><code>{\n  \"userId\": 2,\n  \"joinDate\": \"2025-01-01T00:00:00Z\"\n}\n</code></pre></p> <p>cURL Example: <pre><code>curl -X POST https://iddirnet-75e4b810c131.herokuapp.com/api/v1/iddirs/1/members \\\n  -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"userId\": 2,\n    \"joinDate\": \"2025-01-01T00:00:00Z\"\n  }'\n</code></pre></p> <p>Response (201 Created): <pre><code>{\n  \"id\": 2,\n  \"userId\": 2,\n  \"iddirId\": 1,\n  \"joinDate\": \"2025-01-01T00:00:00Z\",\n  \"status\": \"active\"\n}\n</code></pre></p>"},{"location":"api/#remove-member-delete-iddirsiddiridmembersmemberid","title":"Remove Member (DELETE /iddirs/{iddirId}/members/{memberId})","text":"<p>Remove a member from an Iddir.</p> <p>Path Parameters: - <code>iddirId</code> (int, required): Iddir ID. - <code>memberId</code> (int, required): Member ID.</p> <p>cURL Example: <pre><code>curl -X DELETE https://iddirnet-75e4b810c131.herokuapp.com/api/v1/iddirs/1/members/1 \\\n  -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n</code></pre></p> <p>Response (204 No Content): Empty body.</p>"},{"location":"api/#contributions","title":"Contributions","text":"<p>CRUD for tracking contributions/payments to Iddirs.</p>"},{"location":"api/#list-contributions-get-iddirsiddiridcontributions","title":"List Contributions (GET /iddirs/{iddirId}/contributions)","text":"<p>List contributions for an Iddir.</p> <p>Path Parameters: - <code>iddirId</code> (int, required): Iddir ID.</p> <p>Query Parameters: - <code>memberId</code> (int, optional): Filter by member.</p> <p>cURL Example: <pre><code>curl -X GET \"https://iddirnet-75e4b810c131.herokuapp.com/api/v1/iddirs/1/contributions?memberId=1\" \\\n  -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n</code></pre></p> <p>Response (200 OK): <pre><code>{\n  \"contributions\": [\n    {\n      \"id\": 1,\n      \"memberId\": 1,\n      \"iddirId\": 1,\n      \"amount\": 100.00,\n      \"date\": \"2025-02-01T00:00:00Z\",\n      \"description\": \"Monthly contribution\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"api/#create-contribution-post-iddirsiddiridcontributions","title":"Create Contribution (POST /iddirs/{iddirId}/contributions)","text":"<p>Record a new contribution.</p> <p>Path Parameters: - <code>iddirId</code> (int, required): Iddir ID.</p> <p>Request Body: <pre><code>{\n  \"memberId\": 1,\n  \"amount\": 100.00,\n  \"date\": \"2025-02-01T00:00:00Z\",\n  \"description\": \"Monthly contribution\"\n}\n</code></pre></p> <p>cURL Example: <pre><code>curl -X POST https://iddirnet-75e4b810c131.herokuapp.com/api/v1/iddirs/1/contributions \\\n  -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"memberId\": 1,\n    \"amount\": 100.00,\n    \"date\": \"2025-02-01T00:00:00Z\",\n    \"description\": \"Monthly contribution\"\n  }'\n</code></pre></p> <p>Response (201 Created): <pre><code>{\n  \"id\": 1,\n  \"memberId\": 1,\n  \"iddirId\": 1,\n  \"amount\": 100.00,\n  \"date\": \"2025-02-01T00:00:00Z\",\n  \"description\": \"Monthly contribution\"\n}\n</code></pre></p>"},{"location":"api/#update-contribution-put-iddirsiddiridcontributionsid","title":"Update Contribution (PUT /iddirs/{iddirId}/contributions/{id})","text":"<p>Update a contribution.</p> <p>Path Parameters: - <code>iddirId</code> (int, required): Iddir ID. - <code>id</code> (int, required): Contribution ID.</p> <p>Request Body: <pre><code>{\n  \"amount\": 150.00,\n  \"description\": \"Updated contribution\"\n}\n</code></pre></p> <p>cURL Example: <pre><code>curl -X PUT https://iddirnet-75e4b810c131.herokuapp.com/api/v1/iddirs/1/contributions/1 \\\n  -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"amount\": 150.00,\n    \"description\": \"Updated contribution\"\n  }'\n</code></pre></p> <p>Response (200 OK): <pre><code>{\n  \"id\": 1,\n  \"memberId\": 1,\n  \"iddirId\": 1,\n  \"amount\": 150.00,\n  \"date\": \"2025-02-01T00:00:00Z\",\n  \"description\": \"Updated contribution\"\n}\n</code></pre></p>"},{"location":"api/#delete-contribution-delete-iddirsiddiridcontributionsid","title":"Delete Contribution (DELETE /iddirs/{iddirId}/contributions/{id})","text":"<p>Delete a contribution.</p> <p>Path Parameters: - <code>iddirId</code> (int, required): Iddir ID. - <code>id</code> (int, required): Contribution ID.</p> <p>cURL Example: <pre><code>curl -X DELETE https://iddirnet-75e4b810c131.herokuapp.com/api/v1/iddirs/1/contributions/1 \\\n  -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n</code></pre></p> <p>Response (204 No Content): Empty body.</p>"},{"location":"api/#error-responses","title":"Error Responses","text":"<p>Common error examples:</p> <ul> <li>401 Unauthorized:   <code>json:disable-run   {     \"error\": \"Unauthorized\",     \"details\": \"Invalid token\"   }</code></li> </ul> <p>-- 401 Unauthorized:   ```json   {     \"error\": \"Unauthorized\",     \"details\": \"Invalid token\"   }</p> <ul> <li>500 Internal Server Error:   <pre><code>{\n  \"error\": \"Internal Server Error\",\n  \"details\": \"Unexpected error occurred\"\n}\n</code></pre></li> </ul> <p>For more details, refer to the Swagger UI or Postman Collection. ```</p>"},{"location":"architecture/","title":"System Architecture","text":"<p>IddirNet is a mobile-first platform (Android app for members/leaders, web dashboard for admins) built to enhance transparency and efficiency in Ethiopian Iddir communities. It uses a layered architecture: Frontend (React Native for mobile, React for web), Backend (Node.js/Express REST APIs), Database (PostgreSQL), and external integrations for payments and locations.</p>"},{"location":"architecture/#overview","title":"Overview","text":"<p>The system follows a client-server model with role-based access (members, leaders, admins). Core modules include: - Inventory Tracking: Manages resource lifecycle (owned, borrowed, rented) with real-time status updates. - Payment Management: Processes fees/fines/rentals via Daraja API, generates digital receipts. - Member Management: Profiles, histories, and status tracking. - Authentication: JWT with RBAC for secure access.</p> <p>Data flows through secure REST APIs to PostgreSQL, with logging for auditing. Scalable for thousands of users, with encryption and compliance.</p>"},{"location":"architecture/#architecture-diagram","title":"Architecture Diagram","text":""},{"location":"architecture/#key-components","title":"Key Components","text":"Component Description Technologies Frontend (Mobile) User interfaces for members/leaders (payments, resources, notifications). React Native (Android) Frontend (Admin Dashboard) Web-based oversight for multi-Iddir management and reports. React + Material-UI Backend Services Handles CRUD for modules; integrates Daraja/LocationIQ. Node.js/Express, JWT Auth Database Stores users, payments, resources, logs; supports analytics. PostgreSQL (with pgAdmin for schema) External APIs Payments (Daraja) and Geocoding (LocationIQ). RESTful calls via Axios Notifications Automated reminders for payments/resources. Twilio/SendGrid"},{"location":"architecture/#data-flow-summary","title":"Data Flow Summary","text":"<p>Based on user journeys:</p> User Type Journey Flow Member Registration/Login \u2192 Payment \u2192 Resource Request App \u2192 Auth API \u2192 DB (validate/join) \u2192 Daraja (pay) \u2192 Receipt Generation \u2192 LocationIQ (map pickup). Leader Login \u2192 Track Contributions \u2192 Manage Resources App \u2192 API (fetch members/payments) \u2192 Approve Requests \u2192 Update Inventory DB \u2192 Notify via SMS. Admin Dashboard Login \u2192 Oversight \u2192 Reporting Web \u2192 MFA Auth \u2192 Analytics Query (DB) \u2192 Generate Reports \u2192 Mediate Grievances. <p>All interactions use encrypted HTTPS; logs ensure auditability.</p> <p>For data models, see ERD. Integrations detailed in Integrations.</p> <p>Pro Tip</p> <p>Deploy via Heroku/Docker; use Redis for caching high-traffic queries like payment histories.</p>"},{"location":"erd/","title":"Entity-Relationship Diagram","text":"<p>This ERD captures the core data model from the system requirements, including users, Iddirs, payments, resources, and supporting entities like rules and grievances.</p>"},{"location":"erd/#overview","title":"Overview","text":"<p>Entities support modules like member management (profiles/histories), payments (transactions/receipts), and inventory (resources/rentals). Relationships: One Iddir has many Members; One Member has many Contributions/Resources Borrowed.</p>"},{"location":"integrations/","title":"Integrations","text":"<p>IddirNet supports seamless integration with third-party services to enhance core functionalities like payments, notifications, and location-based services. Key integrations include Daraja API for mobile money transactions and LocationIQ for geocoding, enabling real-time payment validation, automated receipts, and mapping of Iddir branches/resource pickup points.</p>"},{"location":"integrations/#supported-integrations","title":"Supported Integrations","text":"<ul> <li>Daraja API (M-Pesa Payments): Handles monthly fees, fines, and rental payments with secure mobile money processing. Supports real-time validation and digital receipt generation for transparency.</li> <li>LocationIQ (Geocoding): Provides location services for mapping Iddir locations, finding nearest branches, and logistical planning for resource distribution.</li> <li>Email/SMS: SendGrid or Twilio for automated reminders (e.g., outstanding contributions) and notifications.</li> <li>Cloud Storage: Heroku for storing receipts, resource photos, and members data.</li> </ul>"}]}